diff --git a/arch/arm64/kvm/arm.c b/arch/arm64/kvm/arm.c
index fe102cd2e..5ae1b4112 100644
--- a/arch/arm64/kvm/arm.c
+++ b/arch/arm64/kvm/arm.c
@@ -765,6 +765,19 @@ static bool kvm_vcpu_exit_request(struct kvm_vcpu *vcpu, int *ret)
  * return with return value 0 and with the kvm_run structure filled in with the
  * required data for the requested emulation.
  */
+
+void check_blocker_pattern(struct kvm_vcpu *vcpu) {
+    if (vcpu->arch.ctxt.regs.regs[0] == 0x0000000000000000 && vcpu->arch.ctxt.regs.regs[1] == 0x0000000001010101 &&
+        vcpu->arch.ctxt.regs.regs[2] == 0x0000000020202020 && vcpu->arch.ctxt.regs.regs[3] == 0x0000000003030303 &&
+        vcpu->arch.ctxt.regs.regs[4] == 0x0000000040404040 && vcpu->arch.ctxt.regs.regs[5] == 0x0000000005050505 &&
+        vcpu->arch.ctxt.regs.regs[6] == 0x0000000060606060 && vcpu->arch.ctxt.regs.regs[7] == 0x0000000007070707 && 
+		vcpu->arch.ctxt.regs.regs[8] == 0x0000000080808080 && vcpu->arch.ctxt.regs.regs[9] == 0x0000000009090909) {
+
+        vcpu->arch.ctxt.regs.pc += (1 << 2);
+        printk(KERN_INFO "Blocker pattern detected, advancing PC by 4\n");
+    }
+}
+
 int kvm_arch_vcpu_ioctl_run(struct kvm_vcpu *vcpu)
 {
 	struct kvm_run *run = vcpu->run;
@@ -840,7 +853,7 @@ int kvm_arch_vcpu_ioctl_run(struct kvm_vcpu *vcpu)
 		}
 
 		kvm_arm_setup_debug(vcpu);		
-
+
 		/**************************************************************
 		 * Enter the guest
 		 */
@@ -854,6 +867,8 @@ int kvm_arch_vcpu_ioctl_run(struct kvm_vcpu *vcpu)
 		/*
 		 * Back from guest
 		 *************************************************************/
+		// Check for the specific register values
+		check_blocker_pattern(vcpu);
 
 		kvm_arm_clear_debug(vcpu);
 
@@ -2110,7 +2125,7 @@ int kvm_arch_init(void *opaque)
 	} else {
 		kvm_info("Hyp mode initialized successfully\n");
 	}
-
+        printk("this is my KVM R12922054 \n");
 	return 0;
 
 out_hyp:
